package scaffold.forms;

import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import scaffold.uml.basic.UmlType;
import scaffold.uml.datatypes.AslUserDefinedType;
import scaffold.uml.basic.cm.CmParameter;
import scaffold.uml.basic.cm.CmOperation;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.TableModel;


public class UMLParametersForm extends javax.swing.JFrame {
    public UMLParametersForm() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        addParamPopup();
    }     
    
    public void setOperationToEdit(CmOperation operation) {
        this.operation = operation;
    }
    
    private void addParamPopup() {
        paramPopup = new PopupMenu();
        add(paramPopup);

        MenuItem remove = new MenuItem("Remove");
        paramPopup.add(remove);
        
        remove.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                removeParameter(paramToDelete);
            }
        } );
    }
    
    public void loadValues() {                
        TableModel tabMod = paramsTable.getModel();

        //first, clear the table
        paramNames.clear();
        for (int i = 0; i < tabMod.getRowCount(); i++) {
            for(int j = 0; j < tabMod.getColumnCount(); j++) {
                tabMod.setValueAt(null, i, j);
            }
        }               
        
        int row = 0;
        for (CmParameter param: operation.getParameters()) {
            paramNames.add(param.getName());
            tabMod.setValueAt(param.getName(), row, 0);
            
            if (param.getType() != null) {
                tabMod.setValueAt(param.getType().getName(), row, 1);
            }
             
            tabMod.setValueAt(CmParameter.directionTypeToString(param.getDirection()), row, 2);
            
            row++;
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attributePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paramsTable = new javax.swing.JTable();
        paramsTable.putClientProperty("terminateEditOnFocusLost", true);

        paramsTable.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent event) {                 
                if (event.isPopupTrigger()) {
                    paramToDelete = paramsTable.rowAtPoint(event.getPoint());
                    paramPopup.show(UMLParametersForm.this, 
                        event.getPoint().x, event.getPoint().y+55);  
                }
            }
        });
        attributeOK = new javax.swing.JButton();
        attributeCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        paramsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Type", "Direction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        paramsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(paramsTable);
        paramsTable.getColumnModel().getColumn(0).setResizable(false);
        paramsTable.getColumnModel().getColumn(1).setResizable(false);
        paramsTable.getColumnModel().getColumn(2).setResizable(false);

        attributeOK.setText("OK");
        attributeOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeOKActionPerformed(evt);
            }
        });

        attributeCancel.setText("Cancel");
        attributeCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attributePanelLayout = new javax.swing.GroupLayout(attributePanel);
        attributePanel.setLayout(attributePanelLayout);
        attributePanelLayout.setHorizontalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributePanelLayout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(attributeOK)
                .addGap(143, 143, 143)
                .addComponent(attributeCancel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
        );
        attributePanelLayout.setVerticalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attributeCancel)
                    .addComponent(attributeOK))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 2, Short.MAX_VALUE)
                .addComponent(attributePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(attributePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void attributeCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_attributeCancelActionPerformed

    private void attributeOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeOKActionPerformed
        handleOK();
    }//GEN-LAST:event_attributeOKActionPerformed

    private void handleOK() {        
        TableModel tabMod = paramsTable.getModel();
        for (int i=0; i<tabMod.getRowCount(); i++) {
            String paramName = (String) tabMod.getValueAt(i, 0);
            if (paramName != null && !paramName.equals("")) {
                String type = (String) tabMod.getValueAt(i, 1);
                String direction = (String) tabMod.getValueAt(i, 2);
                
                UmlType t = null;
                
                //get type object for type name
                if (type != null && !type.isEmpty()) {
                    t = UmlType.getTypeByName(type);
                    
                    //create new type if it doesn't exist
                    if (t == null) {
                        t = AslUserDefinedType.create(type);                                        
                    }                    
                }
                               
                updateParameter(i, paramName, t, direction);
            }
        }        

        this.dispose();
    }       

    private void removeParameter(int row) {
        if (row >= 0) {
            String paramName = (String) paramsTable.getModel().getValueAt(row, 0);
            
            if (paramName != null) {
                operation.removeParameter(paramName);
            }
            
            loadValues();
        }
    }

    private void updateParameter(int row, String name, UmlType type, String direction) {
        CmParameter param;
        if (row < paramNames.size()) {
            param = operation.getParameterByName(paramNames.get(row));
            assert (param != null) : "internal error: null parameter #" + row;
        } else {                
            param = operation.addParameter(name);              
        }
                
        if (name != null && param.getName().equals(name)) {
            param.setName(name);
        }
        if (type != null && param.getType() != type) {
            param.setTypeID(type.getID());
        }        
        if (direction != null && param.getDirection() != CmParameter.valueOfDirectionType(direction)) {
            param.setDirection(CmParameter.valueOfDirectionType(direction));
        }
    }

    private CmOperation operation;    
    
    private List<String> paramNames = new ArrayList<String>();
    private PopupMenu paramPopup;
    private int paramToDelete;
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attributeCancel;
    private javax.swing.JButton attributeOK;
    private javax.swing.JPanel attributePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable paramsTable;
    // End of variables declaration//GEN-END:variables
}
